// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thanishsid/goserver/repository (interfaces: Repository,TxRepository)

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v4"
	domain "github.com/thanishsid/goserver/domain"
	repository "github.com/thanishsid/goserver/repository"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ExecTx mocks base method.
func (m *MockRepository) ExecTx(arg0 context.Context, arg1 pgx.TxOptions, arg2 repository.TxFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockRepositoryMockRecorder) ExecTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockRepository)(nil).ExecTx), arg0, arg1, arg2)
}

// UserRepository mocks base method.
func (m *MockRepository) UserRepository() domain.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepository")
	ret0, _ := ret[0].(domain.UserRepository)
	return ret0
}

// UserRepository indicates an expected call of UserRepository.
func (mr *MockRepositoryMockRecorder) UserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepository", reflect.TypeOf((*MockRepository)(nil).UserRepository))
}

// MockTxRepository is a mock of TxRepository interface.
type MockTxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTxRepositoryMockRecorder
}

// MockTxRepositoryMockRecorder is the mock recorder for MockTxRepository.
type MockTxRepositoryMockRecorder struct {
	mock *MockTxRepository
}

// NewMockTxRepository creates a new mock instance.
func NewMockTxRepository(ctrl *gomock.Controller) *MockTxRepository {
	mock := &MockTxRepository{ctrl: ctrl}
	mock.recorder = &MockTxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxRepository) EXPECT() *MockTxRepositoryMockRecorder {
	return m.recorder
}

// UserRepository mocks base method.
func (m *MockTxRepository) UserRepository() domain.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepository")
	ret0, _ := ret[0].(domain.UserRepository)
	return ret0
}

// UserRepository indicates an expected call of UserRepository.
func (mr *MockTxRepositoryMockRecorder) UserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepository", reflect.TypeOf((*MockTxRepository)(nil).UserRepository))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thanishsid/goserver/infrastructure/tokenizer (interfaces: Tokenizer)

// Package mocktoken is a generated GoMock package.
package mocktoken

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tokenizer "github.com/thanishsid/goserver/infrastructure/tokenizer"
)

// MockTokenizer is a mock of Tokenizer interface.
type MockTokenizer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenizerMockRecorder
}

// MockTokenizerMockRecorder is the mock recorder for MockTokenizer.
type MockTokenizerMockRecorder struct {
	mock *MockTokenizer
}

// NewMockTokenizer creates a new mock instance.
func NewMockTokenizer(ctrl *gomock.Controller) *MockTokenizer {
	mock := &MockTokenizer{ctrl: ctrl}
	mock.recorder = &MockTokenizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenizer) EXPECT() *MockTokenizerMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenizer) CreateToken(arg0 context.Context, arg1 tokenizer.Validateable) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenizerMockRecorder) CreateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenizer)(nil).CreateToken), arg0, arg1)
}

// GetClaims mocks base method.
func (m *MockTokenizer) GetClaims(arg0 context.Context, arg1 string, arg2 tokenizer.Validateable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaims", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClaims indicates an expected call of GetClaims.
func (mr *MockTokenizerMockRecorder) GetClaims(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaims", reflect.TypeOf((*MockTokenizer)(nil).GetClaims), arg0, arg1, arg2)
}

// GetClaimsUnsafe mocks base method.
func (m *MockTokenizer) GetClaimsUnsafe(arg0 context.Context, arg1 string, arg2 tokenizer.Validateable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimsUnsafe", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClaimsUnsafe indicates an expected call of GetClaimsUnsafe.
func (mr *MockTokenizerMockRecorder) GetClaimsUnsafe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimsUnsafe", reflect.TypeOf((*MockTokenizer)(nil).GetClaimsUnsafe), arg0, arg1, arg2)
}

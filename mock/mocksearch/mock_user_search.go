// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thanishsid/goserver/infrastructure/search (interfaces: UserSearcher)

// Package mocksearch is a generated GoMock package.
package mocksearch

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/thanishsid/goserver/domain"
	input "github.com/thanishsid/goserver/input"
)

// MockUserSearcher is a mock of UserSearcher interface.
type MockUserSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockUserSearcherMockRecorder
}

// MockUserSearcherMockRecorder is the mock recorder for MockUserSearcher.
type MockUserSearcherMockRecorder struct {
	mock *MockUserSearcher
}

// NewMockUserSearcher creates a new mock instance.
func NewMockUserSearcher(ctrl *gomock.Controller) *MockUserSearcher {
	mock := &MockUserSearcher{ctrl: ctrl}
	mock.recorder = &MockUserSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSearcher) EXPECT() *MockUserSearcherMockRecorder {
	return m.recorder
}

// AddOrUpdateUser mocks base method.
func (m *MockUserSearcher) AddOrUpdateUser(arg0 context.Context, arg1 *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateUser indicates an expected call of AddOrUpdateUser.
func (mr *MockUserSearcherMockRecorder) AddOrUpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateUser", reflect.TypeOf((*MockUserSearcher)(nil).AddOrUpdateUser), arg0, arg1)
}

// RemoveUser mocks base method.
func (m *MockUserSearcher) RemoveUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockUserSearcherMockRecorder) RemoveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockUserSearcher)(nil).RemoveUser), arg0, arg1)
}

// SearchUsers mocks base method.
func (m *MockUserSearcher) SearchUsers(arg0 context.Context, arg1 input.UserFilterBase) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", arg0, arg1)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers.
func (mr *MockUserSearcherMockRecorder) SearchUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockUserSearcher)(nil).SearchUsers), arg0, arg1)
}

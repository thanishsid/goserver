// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thanishsid/goserver/infrastructure/postgres (interfaces: Querier)

// Package mockpostgres is a generated GoMock package.
package mockpostgres

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	postgres "github.com/thanishsid/goserver/infrastructure/postgres"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CheckImageExists mocks base method.
func (m *MockQuerier) CheckImageExists(arg0 context.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckImageExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckImageExists indicates an expected call of CheckImageExists.
func (mr *MockQuerierMockRecorder) CheckImageExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckImageExists", reflect.TypeOf((*MockQuerier)(nil).CheckImageExists), arg0, arg1)
}

// CheckImageHashExists mocks base method.
func (m *MockQuerier) CheckImageHashExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckImageHashExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckImageHashExists indicates an expected call of CheckImageHashExists.
func (mr *MockQuerierMockRecorder) CheckImageHashExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckImageHashExists", reflect.TypeOf((*MockQuerier)(nil).CheckImageHashExists), arg0, arg1)
}

// DeleteAllUsers mocks base method.
func (m *MockQuerier) DeleteAllUsers(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUsers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllUsers indicates an expected call of DeleteAllUsers.
func (mr *MockQuerierMockRecorder) DeleteAllUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUsers", reflect.TypeOf((*MockQuerier)(nil).DeleteAllUsers), arg0)
}

// DeleteImage mocks base method.
func (m *MockQuerier) DeleteImage(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockQuerierMockRecorder) DeleteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockQuerier)(nil).DeleteImage), arg0, arg1)
}

// GetAllImages mocks base method.
func (m *MockQuerier) GetAllImages(arg0 context.Context, arg1 []uuid.UUID) ([]postgres.GetAllImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllImages", arg0, arg1)
	ret0, _ := ret[0].([]postgres.GetAllImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImages indicates an expected call of GetAllImages.
func (mr *MockQuerierMockRecorder) GetAllImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImages", reflect.TypeOf((*MockQuerier)(nil).GetAllImages), arg0, arg1)
}

// GetAllUsers mocks base method.
func (m *MockQuerier) GetAllUsers(arg0 context.Context, arg1 []uuid.UUID) ([]postgres.GetAllUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1)
	ret0, _ := ret[0].([]postgres.GetAllUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockQuerierMockRecorder) GetAllUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockQuerier)(nil).GetAllUsers), arg0, arg1)
}

// GetImageById mocks base method.
func (m *MockQuerier) GetImageById(arg0 context.Context, arg1 uuid.UUID) (postgres.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageById", arg0, arg1)
	ret0, _ := ret[0].(postgres.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageById indicates an expected call of GetImageById.
func (mr *MockQuerierMockRecorder) GetImageById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageById", reflect.TypeOf((*MockQuerier)(nil).GetImageById), arg0, arg1)
}

// GetManyImages mocks base method.
func (m *MockQuerier) GetManyImages(arg0 context.Context, arg1 postgres.GetManyImagesParams) ([]postgres.GetManyImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyImages", arg0, arg1)
	ret0, _ := ret[0].([]postgres.GetManyImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyImages indicates an expected call of GetManyImages.
func (mr *MockQuerierMockRecorder) GetManyImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyImages", reflect.TypeOf((*MockQuerier)(nil).GetManyImages), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(arg0 context.Context, arg1 string) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockQuerier) GetUserById(arg0 context.Context, arg1 uuid.UUID) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockQuerierMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockQuerier)(nil).GetUserById), arg0, arg1)
}

// HardDeleteUser mocks base method.
func (m *MockQuerier) HardDeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteUser indicates an expected call of HardDeleteUser.
func (mr *MockQuerierMockRecorder) HardDeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteUser", reflect.TypeOf((*MockQuerier)(nil).HardDeleteUser), arg0, arg1)
}

// InsertOrUpdateImage mocks base method.
func (m *MockQuerier) InsertOrUpdateImage(arg0 context.Context, arg1 postgres.InsertOrUpdateImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateImage indicates an expected call of InsertOrUpdateImage.
func (mr *MockQuerierMockRecorder) InsertOrUpdateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateImage", reflect.TypeOf((*MockQuerier)(nil).InsertOrUpdateImage), arg0, arg1)
}

// InsertOrUpdateUser mocks base method.
func (m *MockQuerier) InsertOrUpdateUser(arg0 context.Context, arg1 postgres.InsertOrUpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateUser indicates an expected call of InsertOrUpdateUser.
func (mr *MockQuerierMockRecorder) InsertOrUpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateUser", reflect.TypeOf((*MockQuerier)(nil).InsertOrUpdateUser), arg0, arg1)
}

// SoftDeleteUser mocks base method.
func (m *MockQuerier) SoftDeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteUser indicates an expected call of SoftDeleteUser.
func (mr *MockQuerierMockRecorder) SoftDeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteUser", reflect.TypeOf((*MockQuerier)(nil).SoftDeleteUser), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thanishsid/goserver/infrastructure/db (interfaces: DB,Querier,Transactioner)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgx "github.com/jackc/pgx/v4"
	db "github.com/thanishsid/goserver/infrastructure/db"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDB) BeginTx(arg0 context.Context, arg1 pgx.TxOptions) (db.Transactioner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0, arg1)
	ret0, _ := ret[0].(db.Transactioner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDBMockRecorder) BeginTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDB)(nil).BeginTx), arg0, arg1)
}

// CheckImageExists mocks base method.
func (m *MockDB) CheckImageExists(arg0 context.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckImageExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckImageExists indicates an expected call of CheckImageExists.
func (mr *MockDBMockRecorder) CheckImageExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckImageExists", reflect.TypeOf((*MockDB)(nil).CheckImageExists), arg0, arg1)
}

// CheckImageHashExists mocks base method.
func (m *MockDB) CheckImageHashExists(arg0 context.Context, arg1 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckImageHashExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckImageHashExists indicates an expected call of CheckImageHashExists.
func (mr *MockDBMockRecorder) CheckImageHashExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckImageHashExists", reflect.TypeOf((*MockDB)(nil).CheckImageHashExists), arg0, arg1)
}

// DeleteImage mocks base method.
func (m *MockDB) DeleteImage(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockDBMockRecorder) DeleteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockDB)(nil).DeleteImage), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockDB) DeleteRole(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockDBMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockDB)(nil).DeleteRole), arg0, arg1)
}

// GetAllImagesInIDS mocks base method.
func (m *MockDB) GetAllImagesInIDS(arg0 context.Context, arg1 []uuid.UUID) ([]db.GetAllImagesInIDSRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllImagesInIDS", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAllImagesInIDSRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImagesInIDS indicates an expected call of GetAllImagesInIDS.
func (mr *MockDBMockRecorder) GetAllImagesInIDS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImagesInIDS", reflect.TypeOf((*MockDB)(nil).GetAllImagesInIDS), arg0, arg1)
}

// GetAllRoles mocks base method.
func (m *MockDB) GetAllRoles(arg0 context.Context) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", arg0)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockDBMockRecorder) GetAllRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockDB)(nil).GetAllRoles), arg0)
}

// GetAllUsersInIDS mocks base method.
func (m *MockDB) GetAllUsersInIDS(arg0 context.Context, arg1 []uuid.UUID) ([]db.GetAllUsersInIDSRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersInIDS", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAllUsersInIDSRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersInIDS indicates an expected call of GetAllUsersInIDS.
func (mr *MockDBMockRecorder) GetAllUsersInIDS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersInIDS", reflect.TypeOf((*MockDB)(nil).GetAllUsersInIDS), arg0, arg1)
}

// GetImageById mocks base method.
func (m *MockDB) GetImageById(arg0 context.Context, arg1 uuid.UUID) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageById", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageById indicates an expected call of GetImageById.
func (mr *MockDBMockRecorder) GetImageById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageById", reflect.TypeOf((*MockDB)(nil).GetImageById), arg0, arg1)
}

// GetManyImages mocks base method.
func (m *MockDB) GetManyImages(arg0 context.Context, arg1 db.GetManyImagesParams) ([]db.GetManyImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyImages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetManyImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyImages indicates an expected call of GetManyImages.
func (mr *MockDBMockRecorder) GetManyImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyImages", reflect.TypeOf((*MockDB)(nil).GetManyImages), arg0, arg1)
}

// GetManyUsers mocks base method.
func (m *MockDB) GetManyUsers(arg0 context.Context, arg1 db.GetManyUsersParams) ([]db.GetManyUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetManyUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyUsers indicates an expected call of GetManyUsers.
func (mr *MockDBMockRecorder) GetManyUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyUsers", reflect.TypeOf((*MockDB)(nil).GetManyUsers), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockDB) GetUserByEmail(arg0 context.Context, arg1 string) (db.GetUserByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDBMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDB)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockDB) GetUserById(arg0 context.Context, arg1 uuid.UUID) (db.GetUserByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockDBMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockDB)(nil).GetUserById), arg0, arg1)
}

// HardDeleteUser mocks base method.
func (m *MockDB) HardDeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteUser indicates an expected call of HardDeleteUser.
func (mr *MockDBMockRecorder) HardDeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteUser", reflect.TypeOf((*MockDB)(nil).HardDeleteUser), arg0, arg1)
}

// InsertOrUpdateImage mocks base method.
func (m *MockDB) InsertOrUpdateImage(arg0 context.Context, arg1 db.InsertOrUpdateImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateImage indicates an expected call of InsertOrUpdateImage.
func (mr *MockDBMockRecorder) InsertOrUpdateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateImage", reflect.TypeOf((*MockDB)(nil).InsertOrUpdateImage), arg0, arg1)
}

// InsertOrUpdateRoles mocks base method.
func (m *MockDB) InsertOrUpdateRoles(arg0 context.Context, arg1 db.InsertOrUpdateRolesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateRoles", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateRoles indicates an expected call of InsertOrUpdateRoles.
func (mr *MockDBMockRecorder) InsertOrUpdateRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateRoles", reflect.TypeOf((*MockDB)(nil).InsertOrUpdateRoles), arg0, arg1)
}

// InsertOrUpdateUser mocks base method.
func (m *MockDB) InsertOrUpdateUser(arg0 context.Context, arg1 db.InsertOrUpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateUser indicates an expected call of InsertOrUpdateUser.
func (mr *MockDBMockRecorder) InsertOrUpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateUser", reflect.TypeOf((*MockDB)(nil).InsertOrUpdateUser), arg0, arg1)
}

// SoftDeleteUser mocks base method.
func (m *MockDB) SoftDeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteUser indicates an expected call of SoftDeleteUser.
func (mr *MockDBMockRecorder) SoftDeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteUser", reflect.TypeOf((*MockDB)(nil).SoftDeleteUser), arg0, arg1)
}

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CheckImageExists mocks base method.
func (m *MockQuerier) CheckImageExists(arg0 context.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckImageExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckImageExists indicates an expected call of CheckImageExists.
func (mr *MockQuerierMockRecorder) CheckImageExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckImageExists", reflect.TypeOf((*MockQuerier)(nil).CheckImageExists), arg0, arg1)
}

// CheckImageHashExists mocks base method.
func (m *MockQuerier) CheckImageHashExists(arg0 context.Context, arg1 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckImageHashExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckImageHashExists indicates an expected call of CheckImageHashExists.
func (mr *MockQuerierMockRecorder) CheckImageHashExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckImageHashExists", reflect.TypeOf((*MockQuerier)(nil).CheckImageHashExists), arg0, arg1)
}

// DeleteImage mocks base method.
func (m *MockQuerier) DeleteImage(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockQuerierMockRecorder) DeleteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockQuerier)(nil).DeleteImage), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockQuerier) DeleteRole(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockQuerierMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockQuerier)(nil).DeleteRole), arg0, arg1)
}

// GetAllImagesInIDS mocks base method.
func (m *MockQuerier) GetAllImagesInIDS(arg0 context.Context, arg1 []uuid.UUID) ([]db.GetAllImagesInIDSRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllImagesInIDS", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAllImagesInIDSRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImagesInIDS indicates an expected call of GetAllImagesInIDS.
func (mr *MockQuerierMockRecorder) GetAllImagesInIDS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImagesInIDS", reflect.TypeOf((*MockQuerier)(nil).GetAllImagesInIDS), arg0, arg1)
}

// GetAllRoles mocks base method.
func (m *MockQuerier) GetAllRoles(arg0 context.Context) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", arg0)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockQuerierMockRecorder) GetAllRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockQuerier)(nil).GetAllRoles), arg0)
}

// GetAllUsersInIDS mocks base method.
func (m *MockQuerier) GetAllUsersInIDS(arg0 context.Context, arg1 []uuid.UUID) ([]db.GetAllUsersInIDSRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersInIDS", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAllUsersInIDSRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersInIDS indicates an expected call of GetAllUsersInIDS.
func (mr *MockQuerierMockRecorder) GetAllUsersInIDS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersInIDS", reflect.TypeOf((*MockQuerier)(nil).GetAllUsersInIDS), arg0, arg1)
}

// GetImageById mocks base method.
func (m *MockQuerier) GetImageById(arg0 context.Context, arg1 uuid.UUID) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageById", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageById indicates an expected call of GetImageById.
func (mr *MockQuerierMockRecorder) GetImageById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageById", reflect.TypeOf((*MockQuerier)(nil).GetImageById), arg0, arg1)
}

// GetManyImages mocks base method.
func (m *MockQuerier) GetManyImages(arg0 context.Context, arg1 db.GetManyImagesParams) ([]db.GetManyImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyImages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetManyImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyImages indicates an expected call of GetManyImages.
func (mr *MockQuerierMockRecorder) GetManyImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyImages", reflect.TypeOf((*MockQuerier)(nil).GetManyImages), arg0, arg1)
}

// GetManyUsers mocks base method.
func (m *MockQuerier) GetManyUsers(arg0 context.Context, arg1 db.GetManyUsersParams) ([]db.GetManyUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetManyUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyUsers indicates an expected call of GetManyUsers.
func (mr *MockQuerierMockRecorder) GetManyUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyUsers", reflect.TypeOf((*MockQuerier)(nil).GetManyUsers), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(arg0 context.Context, arg1 string) (db.GetUserByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockQuerier) GetUserById(arg0 context.Context, arg1 uuid.UUID) (db.GetUserByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockQuerierMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockQuerier)(nil).GetUserById), arg0, arg1)
}

// HardDeleteUser mocks base method.
func (m *MockQuerier) HardDeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteUser indicates an expected call of HardDeleteUser.
func (mr *MockQuerierMockRecorder) HardDeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteUser", reflect.TypeOf((*MockQuerier)(nil).HardDeleteUser), arg0, arg1)
}

// InsertOrUpdateImage mocks base method.
func (m *MockQuerier) InsertOrUpdateImage(arg0 context.Context, arg1 db.InsertOrUpdateImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateImage indicates an expected call of InsertOrUpdateImage.
func (mr *MockQuerierMockRecorder) InsertOrUpdateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateImage", reflect.TypeOf((*MockQuerier)(nil).InsertOrUpdateImage), arg0, arg1)
}

// InsertOrUpdateRoles mocks base method.
func (m *MockQuerier) InsertOrUpdateRoles(arg0 context.Context, arg1 db.InsertOrUpdateRolesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateRoles", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateRoles indicates an expected call of InsertOrUpdateRoles.
func (mr *MockQuerierMockRecorder) InsertOrUpdateRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateRoles", reflect.TypeOf((*MockQuerier)(nil).InsertOrUpdateRoles), arg0, arg1)
}

// InsertOrUpdateUser mocks base method.
func (m *MockQuerier) InsertOrUpdateUser(arg0 context.Context, arg1 db.InsertOrUpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateUser indicates an expected call of InsertOrUpdateUser.
func (mr *MockQuerierMockRecorder) InsertOrUpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateUser", reflect.TypeOf((*MockQuerier)(nil).InsertOrUpdateUser), arg0, arg1)
}

// SoftDeleteUser mocks base method.
func (m *MockQuerier) SoftDeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteUser indicates an expected call of SoftDeleteUser.
func (mr *MockQuerierMockRecorder) SoftDeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteUser", reflect.TypeOf((*MockQuerier)(nil).SoftDeleteUser), arg0, arg1)
}

// MockTransactioner is a mock of Transactioner interface.
type MockTransactioner struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionerMockRecorder
}

// MockTransactionerMockRecorder is the mock recorder for MockTransactioner.
type MockTransactionerMockRecorder struct {
	mock *MockTransactioner
}

// NewMockTransactioner creates a new mock instance.
func NewMockTransactioner(ctrl *gomock.Controller) *MockTransactioner {
	mock := &MockTransactioner{ctrl: ctrl}
	mock.recorder = &MockTransactionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactioner) EXPECT() *MockTransactionerMockRecorder {
	return m.recorder
}

// CheckImageExists mocks base method.
func (m *MockTransactioner) CheckImageExists(arg0 context.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckImageExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckImageExists indicates an expected call of CheckImageExists.
func (mr *MockTransactionerMockRecorder) CheckImageExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckImageExists", reflect.TypeOf((*MockTransactioner)(nil).CheckImageExists), arg0, arg1)
}

// CheckImageHashExists mocks base method.
func (m *MockTransactioner) CheckImageHashExists(arg0 context.Context, arg1 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckImageHashExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckImageHashExists indicates an expected call of CheckImageHashExists.
func (mr *MockTransactionerMockRecorder) CheckImageHashExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckImageHashExists", reflect.TypeOf((*MockTransactioner)(nil).CheckImageHashExists), arg0, arg1)
}

// Commit mocks base method.
func (m *MockTransactioner) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionerMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransactioner)(nil).Commit), arg0)
}

// DeleteImage mocks base method.
func (m *MockTransactioner) DeleteImage(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockTransactionerMockRecorder) DeleteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockTransactioner)(nil).DeleteImage), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockTransactioner) DeleteRole(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockTransactionerMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockTransactioner)(nil).DeleteRole), arg0, arg1)
}

// GetAllImagesInIDS mocks base method.
func (m *MockTransactioner) GetAllImagesInIDS(arg0 context.Context, arg1 []uuid.UUID) ([]db.GetAllImagesInIDSRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllImagesInIDS", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAllImagesInIDSRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImagesInIDS indicates an expected call of GetAllImagesInIDS.
func (mr *MockTransactionerMockRecorder) GetAllImagesInIDS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImagesInIDS", reflect.TypeOf((*MockTransactioner)(nil).GetAllImagesInIDS), arg0, arg1)
}

// GetAllRoles mocks base method.
func (m *MockTransactioner) GetAllRoles(arg0 context.Context) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", arg0)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockTransactionerMockRecorder) GetAllRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockTransactioner)(nil).GetAllRoles), arg0)
}

// GetAllUsersInIDS mocks base method.
func (m *MockTransactioner) GetAllUsersInIDS(arg0 context.Context, arg1 []uuid.UUID) ([]db.GetAllUsersInIDSRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersInIDS", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAllUsersInIDSRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersInIDS indicates an expected call of GetAllUsersInIDS.
func (mr *MockTransactionerMockRecorder) GetAllUsersInIDS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersInIDS", reflect.TypeOf((*MockTransactioner)(nil).GetAllUsersInIDS), arg0, arg1)
}

// GetImageById mocks base method.
func (m *MockTransactioner) GetImageById(arg0 context.Context, arg1 uuid.UUID) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageById", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageById indicates an expected call of GetImageById.
func (mr *MockTransactionerMockRecorder) GetImageById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageById", reflect.TypeOf((*MockTransactioner)(nil).GetImageById), arg0, arg1)
}

// GetManyImages mocks base method.
func (m *MockTransactioner) GetManyImages(arg0 context.Context, arg1 db.GetManyImagesParams) ([]db.GetManyImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyImages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetManyImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyImages indicates an expected call of GetManyImages.
func (mr *MockTransactionerMockRecorder) GetManyImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyImages", reflect.TypeOf((*MockTransactioner)(nil).GetManyImages), arg0, arg1)
}

// GetManyUsers mocks base method.
func (m *MockTransactioner) GetManyUsers(arg0 context.Context, arg1 db.GetManyUsersParams) ([]db.GetManyUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetManyUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyUsers indicates an expected call of GetManyUsers.
func (mr *MockTransactionerMockRecorder) GetManyUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyUsers", reflect.TypeOf((*MockTransactioner)(nil).GetManyUsers), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockTransactioner) GetUserByEmail(arg0 context.Context, arg1 string) (db.GetUserByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockTransactionerMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockTransactioner)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockTransactioner) GetUserById(arg0 context.Context, arg1 uuid.UUID) (db.GetUserByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockTransactionerMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockTransactioner)(nil).GetUserById), arg0, arg1)
}

// HardDeleteUser mocks base method.
func (m *MockTransactioner) HardDeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteUser indicates an expected call of HardDeleteUser.
func (mr *MockTransactionerMockRecorder) HardDeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteUser", reflect.TypeOf((*MockTransactioner)(nil).HardDeleteUser), arg0, arg1)
}

// InsertOrUpdateImage mocks base method.
func (m *MockTransactioner) InsertOrUpdateImage(arg0 context.Context, arg1 db.InsertOrUpdateImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateImage indicates an expected call of InsertOrUpdateImage.
func (mr *MockTransactionerMockRecorder) InsertOrUpdateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateImage", reflect.TypeOf((*MockTransactioner)(nil).InsertOrUpdateImage), arg0, arg1)
}

// InsertOrUpdateRoles mocks base method.
func (m *MockTransactioner) InsertOrUpdateRoles(arg0 context.Context, arg1 db.InsertOrUpdateRolesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateRoles", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateRoles indicates an expected call of InsertOrUpdateRoles.
func (mr *MockTransactionerMockRecorder) InsertOrUpdateRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateRoles", reflect.TypeOf((*MockTransactioner)(nil).InsertOrUpdateRoles), arg0, arg1)
}

// InsertOrUpdateUser mocks base method.
func (m *MockTransactioner) InsertOrUpdateUser(arg0 context.Context, arg1 db.InsertOrUpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateUser indicates an expected call of InsertOrUpdateUser.
func (mr *MockTransactionerMockRecorder) InsertOrUpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateUser", reflect.TypeOf((*MockTransactioner)(nil).InsertOrUpdateUser), arg0, arg1)
}

// Rollback mocks base method.
func (m *MockTransactioner) Rollback(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionerMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransactioner)(nil).Rollback), arg0)
}

// SoftDeleteUser mocks base method.
func (m *MockTransactioner) SoftDeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteUser indicates an expected call of SoftDeleteUser.
func (mr *MockTransactionerMockRecorder) SoftDeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteUser", reflect.TypeOf((*MockTransactioner)(nil).SoftDeleteUser), arg0, arg1)
}

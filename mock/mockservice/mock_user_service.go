// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thanishsid/goserver/domain (interfaces: UserService)

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/thanishsid/goserver/domain"
	input "github.com/thanishsid/goserver/internal/input"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ChangeRole mocks base method.
func (m *MockUserService) ChangeRole(arg0 context.Context, arg1 input.RoleChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeRole indicates an expected call of ChangeRole.
func (mr *MockUserServiceMockRecorder) ChangeRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeRole", reflect.TypeOf((*MockUserService)(nil).ChangeRole), arg0, arg1)
}

// CompleteRegistration mocks base method.
func (m *MockUserService) CompleteRegistration(arg0 context.Context, arg1 input.CompleteRegistration) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteRegistration", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteRegistration indicates an expected call of CompleteRegistration.
func (mr *MockUserServiceMockRecorder) CompleteRegistration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRegistration", reflect.TypeOf((*MockUserService)(nil).CompleteRegistration), arg0, arg1)
}

// Delete mocks base method.
func (m *MockUserService) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserService)(nil).Delete), arg0, arg1)
}

// InitRegistration mocks base method.
func (m *MockUserService) InitRegistration(arg0 context.Context, arg1 input.InitRegistration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitRegistration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitRegistration indicates an expected call of InitRegistration.
func (mr *MockUserServiceMockRecorder) InitRegistration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitRegistration", reflect.TypeOf((*MockUserService)(nil).InitRegistration), arg0, arg1)
}

// Update mocks base method.
func (m *MockUserService) Update(arg0 context.Context, arg1 uuid.UUID, arg2 input.UserUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserService)(nil).Update), arg0, arg1, arg2)
}

// User mocks base method.
func (m *MockUserService) User(arg0 context.Context, arg1 uuid.UUID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockUserServiceMockRecorder) User(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserService)(nil).User), arg0, arg1)
}

// Users mocks base method.
func (m *MockUserService) Users(arg0 context.Context, arg1 input.UserFilter) (*domain.ListWithCursor[domain.User], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", arg0, arg1)
	ret0, _ := ret[0].(*domain.ListWithCursor[domain.User])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users.
func (mr *MockUserServiceMockRecorder) Users(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockUserService)(nil).Users), arg0, arg1)
}
